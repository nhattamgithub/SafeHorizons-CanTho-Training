export const idlFactory = ({ IDL }) => {
  const Error = IDL.Variant({
    'CharacterQuestItemNotFound' : IDL.Null,
    'QuestNameAlready' : IDL.Null,
    'QuestNotFound' : IDL.Null,
    'CharacterNameAlready' : IDL.Null,
    'QuestItemNameAlready' : IDL.Null,
    'NotFound' : IDL.Null,
    'MaterialNotFound' : IDL.Null,
    'ChooseOptionNotFound' : IDL.Null,
    'QuestItemNotFound' : IDL.Null,
    'EventNotFound' : IDL.Null,
    'OptionNotFound' : IDL.Null,
    'RequiteItemNotFound' : IDL.Null,
    'CharacterNotFound' : IDL.Null,
    'CannotChoose' : IDL.Null,
  });
  const Result = IDL.Variant({ 'ok' : IDL.Null, 'err' : Error });
  const Result_3 = IDL.Variant({ 'ok' : IDL.Nat, 'err' : Error });
  const Time = IDL.Int;
  const Character = IDL.Record({
    'max_stamina' : IDL.Float64,
    'max_mana' : IDL.Float64,
    'intelligent' : IDL.Float64,
    'character_id' : IDL.Text,
    'luck' : IDL.Float64,
    'name' : IDL.Text,
    'current_stamina' : IDL.Float64,
    'level' : IDL.Nat,
    'current_morale' : IDL.Float64,
    'level_up_exp' : IDL.Float64,
    'character_class' : IDL.Text,
    'current_exp' : IDL.Float64,
    'strength' : IDL.Float64,
    'current_mana' : IDL.Float64,
    'max_hp' : IDL.Float64,
    'current_hp' : IDL.Float64,
    'max_morale' : IDL.Float64,
    'vitality' : IDL.Float64,
  });
  const Character_Quest_Item = IDL.Record({
    'character_id' : IDL.Text,
    'list_quest_item' : IDL.Vec(IDL.Text),
  });
  const Result_2 = IDL.Variant({ 'ok' : Character_Quest_Item, 'err' : Error });
  const Character_take_Opton = IDL.Record({
    'char_max_morale' : IDL.Float64,
    'char_curr_mana' : IDL.Float64,
    'char_curr_morale' : IDL.Float64,
    'character_id' : IDL.Text,
    'char_max_mana' : IDL.Float64,
    'option_id' : IDL.Text,
    'pickup_time' : Time,
    'char_max_hp' : IDL.Float64,
    'char_curr_hp' : IDL.Float64,
    'char_max_stamina' : IDL.Float64,
    'char_curr_stamina' : IDL.Float64,
  });
  const Result_1 = IDL.Variant({
    'ok' : IDL.Vec(Character_take_Opton),
    'err' : Error,
  });
  const Event = IDL.Record({
    'quest_id' : IDL.Text,
    'destiFloation_name' : IDL.Text,
    'description' : IDL.Text,
    'location_name' : IDL.Text,
    'event_id' : IDL.Text,
  });
  const Options = IDL.Record({
    'gain_morale' : IDL.Float64,
    'risk_chance' : IDL.Float64,
    'loss_other' : IDL.Text,
    'loss_stamina' : IDL.Float64,
    'gain_stamina' : IDL.Float64,
    'gain_hp' : IDL.Float64,
    'gain_by_luck' : IDL.Text,
    'gain_exp' : IDL.Float64,
    'lucky_chance' : IDL.Float64,
    'description' : IDL.Text,
    'loss_morale' : IDL.Float64,
    'loss_mana' : IDL.Float64,
    'loss_hp' : IDL.Float64,
    'option_id' : IDL.Text,
    'gain_mana' : IDL.Float64,
    'require_item' : IDL.Opt(IDL.Vec(IDL.Text)),
    'event_id' : IDL.Opt(IDL.Text),
    'gain_other' : IDL.Text,
    'risk_lost' : IDL.Text,
  });
  const Quest = IDL.Record({
    'quest_id' : IDL.Text,
    'description' : IDL.Opt(IDL.Text),
    'image' : IDL.Opt(IDL.Text),
    'price' : IDL.Float64,
    'quest_name' : IDL.Text,
  });
  const Quest_Item = IDL.Record({
    'strengh_require' : IDL.Float64,
    'name' : IDL.Text,
    'quest_item_id' : IDL.Text,
    'images' : IDL.Opt(IDL.Text),
  });
  const Quest_Item_for_Quest = IDL.Record({
    'quest_id' : IDL.Text,
    'quest_item_for_quest_id' : IDL.Text,
    'quest_item_id' : IDL.Text,
  });
  return IDL.Service({
    'clear_data' : IDL.Func([], [Result], []),
    'count_Material' : IDL.Func([IDL.Text], [Result_3], []),
    'createCharacter' : IDL.Func(
        [
          IDL.Text,
          IDL.Text,
          IDL.Nat,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
        ],
        [Result],
        [],
      ),
    'createCharacterTakeOptions' : IDL.Func(
        [
          IDL.Text,
          IDL.Text,
          Time,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
        ],
        [Result],
        [],
      ),
    'createCharacter_Quest_Item' : IDL.Func(
        [IDL.Text, IDL.Vec(IDL.Text)],
        [Result],
        [],
      ),
    'createEvent' : IDL.Func(
        [IDL.Text, IDL.Text, IDL.Text, IDL.Text],
        [Result],
        [],
      ),
    'createMaterial' : IDL.Func(
        [IDL.Text, IDL.Text, IDL.Opt(IDL.Text), IDL.Nat],
        [Result],
        [],
      ),
    'createOption' : IDL.Func(
        [
          IDL.Text,
          IDL.Opt(IDL.Text),
          IDL.Opt(IDL.Vec(IDL.Text)),
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Text,
          IDL.Text,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Text,
          IDL.Text,
        ],
        [Result],
        [],
      ),
    'createQuest' : IDL.Func(
        [IDL.Text, IDL.Float64, IDL.Opt(IDL.Text), IDL.Opt(IDL.Text)],
        [Result],
        [],
      ),
    'createQuestItem' : IDL.Func(
        [IDL.Text, IDL.Float64, IDL.Opt(IDL.Text)],
        [Result],
        [],
      ),
    'createQuestItemforQuest' : IDL.Func([IDL.Text, IDL.Text], [Result], []),
    'inforCharacter' : IDL.Func([IDL.Text], [IDL.Opt(Character)], []),
    'inforCharacterQuestItem' : IDL.Func([IDL.Text], [Result_2], []),
    'init_data' : IDL.Func([], [Result], []),
    'listCharacterTakeOption' : IDL.Func([IDL.Text], [Result_1], []),
    'listEvent' : IDL.Func([], [IDL.Vec(Event)], []),
    'listOptions' : IDL.Func([], [IDL.Vec(Options)], []),
    'listQuest' : IDL.Func([], [IDL.Vec(Quest)], []),
    'listQuestItem' : IDL.Func([], [IDL.Vec(Quest_Item)], []),
    'listQuestItemforQuest' : IDL.Func([], [IDL.Vec(Quest_Item_for_Quest)], []),
    'pos1_to_pos2' : IDL.Func([IDL.Text, IDL.Text], [Result], []),
    'pos2_to_pos3' : IDL.Func([IDL.Text, IDL.Text], [Result], []),
    'pos3_to_pos4' : IDL.Func([IDL.Text, IDL.Text], [Result], []),
    'pos4_to_pos5' : IDL.Func([IDL.Text, IDL.Text], [Result], []),
    'pos5_to_pos6' : IDL.Func([IDL.Text, IDL.Text], [Result], []),
    'randomNat' : IDL.Func([], [IDL.Nat], []),
    'random_probability' : IDL.Func([IDL.Float64], [IDL.Bool], []),
    'updateCharacter' : IDL.Func(
        [
          IDL.Text,
          IDL.Text,
          IDL.Text,
          IDL.Nat,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
          IDL.Float64,
        ],
        [Result],
        [],
      ),
    'updateCharacter_Quest_Item' : IDL.Func(
        [IDL.Text, IDL.Vec(IDL.Text)],
        [Result],
        [],
      ),
  });
};
export const init = ({ IDL }) => { return []; };
